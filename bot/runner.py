from __future__ import annotations

import os
import json
import requests
import tempfile
from typing import List
from pathlib import Path

import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message

from utils.logger import get_logger
from config.settings import get_settings
from database.db import init_db, get_session
from database.models import ParsedListing


logger = get_logger("bot")


def get_first_image_url(obj: ParsedListing) -> str | None:
    """–ü–æ–ª—É—á–∞–µ—Ç URL –ø–µ—Ä–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ JSON —Å–ø–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    if not obj.images_json:
        return None
    try:
        images = json.loads(obj.images_json)
        if images and len(images) > 0:
            return images[0]
    except (json.JSONDecodeError, TypeError):
        pass
    return None


def send_journal_message(bot: telebot.TeleBot, chat_id: int, items: List[ParsedListing], 
                        offset: int, limit: int, total: int, message_id: int = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∂—É—Ä–Ω–∞–ª–∞ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏"""
    if not items:
        text = "–ñ—É—Ä–Ω–∞–ª –ø—É—Å—Ç"
        if message_id:
            try:
                bot.edit_message_text(text, chat_id=chat_id, message_id=message_id)
            except Exception:
                pass
        else:
            bot.send_message(chat_id, text)
        return
    
    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∂—É—Ä–Ω–∞–ª–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    header_text = f"<b>üìã –ñ—É—Ä–Ω–∞–ª –ø–∞—Ä—Å–∏–Ω–≥–∞ (—Å—Ç—Ä. {offset//limit + 1} –∏–∑ {(total-1)//limit + 1})</b>\n"
    header_text += f"üìÑ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total}\n"
    header_text += f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {offset//limit + 1} –∏–∑ {(total-1)//limit + 1} | –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total}"
    
    if message_id:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        try:
            bot.edit_message_text(
                header_text,
                chat_id=chat_id,
                message_id=message_id,
                reply_markup=build_pagination_markup(offset, limit, total),
                parse_mode="HTML",
                disable_web_page_preview=True
            )
        except Exception as e:
            logger.warning(f"Failed to edit header message: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.send_message(
                chat_id, 
                header_text,
                reply_markup=build_pagination_markup(offset, limit, total),
                parse_mode="HTML",
                disable_web_page_preview=True
            )
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        bot.send_message(
            chat_id, 
            header_text,
            reply_markup=build_pagination_markup(offset, limit, total),
            parse_mode="HTML",
            disable_web_page_preview=True
        )
    
    # –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    for i, item in enumerate(items):
        item_text = format_listing_text(item)
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        full_text = f"<b>{i+1}.</b> {item_text}"
        
        # –ü–æ–ª—É—á–∞–µ–º URL –ø–µ—Ä–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        image_url = get_first_image_url(item)
        
        if image_url:
            logger.info(f"Attempting to send photo for item {item.id}: {image_url[:100]}...")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–µ
            try:
                bot.send_photo(
                    chat_id=chat_id,
                    photo=image_url,
                    caption=full_text,
                    parse_mode="HTML"
                )
                logger.info(f"Successfully sent photo via URL for item {item.id}")
            except Exception as e:
                logger.warning(f"Failed to send photo via URL for item {item.id}: {e}")
                
                # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª–æ–º
                logger.info(f"Trying to download and send photo for item {item.id}")
                if send_photo_with_download(bot, chat_id, image_url, full_text):
                    logger.info(f"Successfully sent photo via download for item {item.id}")
                else:
                    # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    logger.warning(f"Failed to send photo via download for item {item.id}")
                    try:
                        fallback_text = f"{full_text}\n\nüì∏ –§–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
                        bot.send_message(
                            chat_id=chat_id,
                            text=fallback_text,
                            parse_mode="HTML",
                            disable_web_page_preview=True
                        )
                        logger.info(f"Sent fallback text message for item {item.id}")
                    except Exception as e2:
                        logger.error(f"Failed to send fallback message for item {item.id}: {e2}")
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            logger.info(f"No image found for item {item.id}, sending text only")
            try:
                bot.send_message(
                    chat_id=chat_id,
                    text=full_text,
                    parse_mode="HTML",
                    disable_web_page_preview=True
                )
                logger.info(f"Successfully sent text message for item {item.id}")
            except Exception as e:
                logger.error(f"Failed to send text message for item {item.id}: {e}")


def format_listing_text(obj: ParsedListing) -> str:
    parts = []
    if obj.title:
        parts.append(f"<b>{obj.title[:100]}</b>")
    if obj.price_raw or obj.price:
        parts.append(f"üí∞ {obj.price_raw or obj.price}")
    if obj.bail_raw or obj.bail:
        parts.append(f"üè† –ó–∞–ª–æ–≥: {obj.bail_raw or obj.bail}")
    if obj.commission_raw or obj.tax:
        parts.append(f"üí≥ –ö–æ–º–∏—Å—Å–∏—è: {obj.commission_raw or obj.tax}")
    if obj.services_raw or obj.services:
        parts.append(f"üîß –£—Å–ª—É–≥–∏: {obj.services_raw or obj.services}")
    if obj.address:
        parts.append(f"üìç {obj.address[:80]}")
    if obj.url:
        parts.append(f"üîó <a href='{obj.url}'>–°—Å—ã–ª–∫–∞</a>")
    return "\n".join(parts)


def build_main_menu() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("‚ñ∂ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä"))
    kb.add(KeyboardButton("üóÇ –ñ—É—Ä–Ω–∞–ª"))
    kb.add(KeyboardButton("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏"))
    return kb


def build_pagination_markup(offset: int, limit: int, total: int) -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup()
    prev_off = max(0, offset - limit)
    next_off = offset + limit if (offset + limit) < total else offset
    buttons = []
    buttons.append(InlineKeyboardButton(text="‚èÆ", callback_data=f"log:{0}:{limit}"))
    buttons.append(InlineKeyboardButton(text="‚óÄ", callback_data=f"log:{prev_off}:{limit}"))
    buttons.append(InlineKeyboardButton(text="‚ñ∂", callback_data=f"log:{next_off}:{limit}"))
    last_page_off = limit * ((total - 1) // limit)
    buttons.append(InlineKeyboardButton(text="‚è≠", callback_data=f"log:{last_page_off}:{limit}"))
    kb.row(*buttons)
    return kb


def build_settings_markup() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å inline –∫–Ω–æ–ø–∫–∞–º–∏"""
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton(text="üåê –ò–∑–º–µ–Ω–∏—Ç—å URL –ø–∞—Ä—Å–∏–Ω–≥–∞", callback_data="settings:change_url"))
    kb.add(InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", callback_data="settings:clear_db"))
    kb.add(InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î", callback_data="settings:db_stats"))
    kb.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="settings:back"))
    return kb


def build_clear_db_confirmation_markup() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton(text="‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="confirm:clear_db:yes"))
    kb.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="confirm:clear_db:no"))
    return kb


def fetch_recent(offset: int, limit: int) -> (List[ParsedListing], int):
    with get_session() as session:
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏, –∑–∞—Ç–µ–º –±–µ–∑
        # –û–±—ä—è–≤–ª–µ–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ (–Ω–µ –ø—É—Å—Ç–æ–π images_json)
        items_with_images = session.query(ParsedListing).filter(
            ParsedListing.images_json.isnot(None),
            ParsedListing.images_json != '',
            ParsedListing.images_json != '[]'
        ).order_by(ParsedListing.created_at.desc()).all()
        
        # –û–±—ä—è–≤–ª–µ–Ω–∏—è –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        items_without_images = session.query(ParsedListing).filter(
            ParsedListing.images_json.is_(None) | 
            (ParsedListing.images_json == '') |
            (ParsedListing.images_json == '[]')
        ).order_by(ParsedListing.created_at.desc()).all()
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º: —Å–Ω–∞—á–∞–ª–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏, –ø–æ—Ç–æ–º –±–µ–∑
        all_items = items_with_images + items_without_images
        total = len(all_items)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        items = all_items[offset:offset + limit]
        
    return items, total


def get_db_stats() -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    with get_session() as session:
        total_count = session.query(ParsedListing).count()
        if total_count == 0:
            return "üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞"
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º—É—é —Å—Ç–∞—Ä—É—é –∏ –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        oldest = session.query(ParsedListing).order_by(ParsedListing.created_at.asc()).first()
        newest = session.query(ParsedListing).order_by(ParsedListing.created_at.desc()).first()
        
        stats = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:</b>\n\n"
        stats += f"üìÑ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: <b>{total_count}</b>\n"
        
        if oldest and newest:
            stats += f"üìÖ –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å: {oldest.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            stats += f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å: {newest.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        
        return stats


def clear_database() -> bool:
    """–û—á–∏—â–∞–µ—Ç –≤—Å—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        with get_session() as session:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
            deleted_count = session.query(ParsedListing).delete()
            session.commit()
            logger.info(f"Database cleared: {deleted_count} records deleted")
            return True
    except Exception as e:
        logger.error(f"Failed to clear database: {e}")
        return False


def validate_url(url: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å URL"""
    import re
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ URL
    url_pattern = re.compile(
        r'^https?://'  # http:// or https://
        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+[A-Z]{2,6}\.?|'  # domain...
        r'localhost|'  # localhost...
        r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})'  # ...or ip
        r'(?::\d+)?'  # optional port
        r'(?:/?|[/?]\S+)$', re.IGNORECASE)
    return bool(url_pattern.match(url))


def save_target_url(url: str) -> bool:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–π URL –≤ .env —Ñ–∞–π–ª"""
    try:
        env_path = Path(".env")
        if not env_path.exists():
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π .env —Ñ–∞–π–ª
            env_path.write_text(f"TARGET_URL={url}\n", encoding="utf-8")
        else:
            # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
            lines = env_path.read_text(encoding="utf-8").splitlines()
            
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å TARGET_URL
            updated = False
            for i, line in enumerate(lines):
                if line.strip().upper().startswith("TARGET_URL"):
                    lines[i] = f"TARGET_URL={url}"
                    updated = True
                    break
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
            if not updated:
                lines.append(f"TARGET_URL={url}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
            env_path.write_text("\n".join(lines) + "\n", encoding="utf-8")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
        os.environ["TARGET_URL"] = url
        logger.info(f"Target URL updated to: {url}")
        return True
        
    except Exception as e:
        logger.error(f"Failed to save target URL: {e}")
        return False


def get_current_target_url() -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π URL –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    s = get_settings()
    return s.target_url or "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"


def send_photo_with_download(bot: telebot.TeleBot, chat_id: int, image_url: str, caption: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∑–∏–≤ –µ—ë"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        response = requests.get(image_url, headers=headers, timeout=10)
        response.raise_for_status()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as temp_file:
            temp_file.write(response.content)
            temp_file_path = temp_file.name
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            with open(temp_file_path, 'rb') as photo_file:
                bot.send_photo(
                    chat_id=chat_id,
                    photo=photo_file,
                    caption=caption,
                    parse_mode="HTML"
                )
            return True
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.unlink(temp_file_path)
            except:
                pass
                
    except Exception as e:
        logger.error(f"Failed to send photo with download: {e}")
        return False


def handle_url_input(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º URL"""
    try:
        new_url = message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å URL
        if not validate_url(new_url):
            bot.reply_to(
                message, 
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL!</b>\n\n"
                "URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
                parse_mode="HTML"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL
        if save_target_url(new_url):
            success_text = (
                f"‚úÖ <b>URL —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
                f"–ù–æ–≤—ã–π URL: <code>{new_url}</code>\n\n"
                f"–¢–µ–ø–µ—Ä—å –ø–∞—Ä—Å–µ—Ä –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç URL –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π."
            )
            bot.reply_to(message, success_text, parse_mode="HTML")
        else:
            bot.reply_to(
                message, 
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ URL!</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode="HTML"
            )
            
    except Exception as e:
        logger.error(f"Error handling URL input: {e}")
        bot.reply_to(
            message, 
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="HTML"
        )


def _load_token() -> str | None:
    # 1) try env
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    # 2) try python-dotenv
    if not token:
        try:
            from dotenv import load_dotenv  # type: ignore
            load_dotenv()
            token = os.getenv("TELEGRAM_BOT_TOKEN")
        except Exception:
            pass
    # 3) manual .env parse (robust to BOM/extra spaces/quotes/accidental '=' prefix)
    if not token:
        env_path = os.path.join(os.getcwd(), ".env")
        try:
            if os.path.exists(env_path):
                with open(env_path, "r", encoding="utf-8") as f:
                    for raw in f:
                        line = raw.strip().lstrip("\ufeff")
                        if not line or line.startswith("#"):
                            continue
                        if line.upper().startswith("TELEGRAM_BOT_TOKEN"):
                            parts = line.split("=", 1)
                            if len(parts) == 2:
                                val = parts[1].strip().strip('"').strip("'")
                                # Fix common mistake like '==token' or '=token'
                                while val.startswith("="):
                                    val = val[1:]
                                token = val
                            break
        except Exception:
            pass
    return token


def _is_valid_token(tok: str | None) -> bool:
    if not tok or ":" not in tok:
        return False
    left = tok.split(":", 1)[0]
    try:
        int(left)
        return True
    except Exception:
        return False


def run_bot() -> None:
    settings = get_settings()
    token = _load_token()
    if not _is_valid_token(token):
        raise RuntimeError(
            "TELEGRAM_BOT_TOKEN is missing or malformed. Put in .env as TELEGRAM_BOT_TOKEN=123456789:ABCdef..."
        )

    init_db()

    bot = telebot.TeleBot(token, parse_mode="HTML", skip_pending=True)
    try:
        bot.delete_webhook(drop_pending_updates=True)
    except Exception:
        pass
    try:
        bot.set_my_commands([
            telebot.types.BotCommand("start", "–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"),
            telebot.types.BotCommand("help", "–ü–æ–º–æ—â—å"),
        ])
    except Exception:
        pass

    @bot.message_handler(commands=["start", "help"])
    def on_start(message: Message):
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=build_main_menu())

    @bot.message_handler(func=lambda m: m.text == "‚ñ∂ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä")
    def on_run_parser(message: Message):
        from src.main import main as cli_main
        try:
            # Run single pass with current settings (equivalent to run-once)
            os.environ.setdefault("PYTHONUNBUFFERED", "1")
            # We call the CLI main with default args; it will pick TARGET_URL from settings
            cli_main()
            bot.reply_to(message, "–ü–∞—Ä—Å–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∂—É—Ä–Ω–∞–ª.")
        except SystemExit:
            # argparse may call sys.exit; ignore
            bot.reply_to(message, "–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.")
        except Exception as exc:
            logger.exception("Parser run failed: %s", exc)
            bot.reply_to(message, f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞: {exc}")

    @bot.message_handler(func=lambda m: m.text == "üóÇ –ñ—É—Ä–Ω–∞–ª")
    def on_journal(message: Message):
        offset, limit = 0, 3  # –£–º–µ–Ω—å—à–∏–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        items, total = fetch_recent(offset, limit)
        send_journal_message(bot, message.chat.id, items, offset, limit, total)

    @bot.callback_query_handler(func=lambda c: c.data and c.data.startswith("log:"))
    def on_log_pagination(call: CallbackQuery):
        try:
            _, off_str, lim_str = call.data.split(":")
            offset = max(0, int(off_str))
            limit = max(1, min(10, int(lim_str)))
        except Exception:
            offset, limit = 0, 3
        items, total = fetch_recent(offset, limit)
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            send_journal_message(bot, call.message.chat.id, items, offset, limit, total, call.message.message_id)
        except Exception as e:
            logger.warning(f"Failed to edit message, sending new one: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            send_journal_message(bot, call.message.chat.id, items, offset, limit, total)
        
        bot.answer_callback_query(call.id)

    @bot.callback_query_handler(func=lambda c: c.data and c.data.startswith("settings:"))
    def on_settings_callback(call: CallbackQuery):
        try:
            action = call.data.split(":", 1)[1]
            
            if action == "change_url":
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ URL
                current_url = get_current_target_url()
                url_text = (
                    f"üåê <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ URL –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞</b>\n\n"
                    f"–¢–µ–∫—É—â–∏–π URL: <code>{current_url}</code>\n\n"
                    f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π URL –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n"
                    f"URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://\n\n"
                    f"<i>–ü—Ä–∏–º–µ—Ä: https://www.avito.ru/moskva/kvartiry/sdam/na_dlitelnyy_srok</i>"
                )
                bot.edit_message_text(
                    url_text,
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    parse_mode="HTML"
                )
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è URL –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                bot.register_next_step_handler(call.message, handle_url_input)
                
            elif action == "clear_db":
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏
                warning_text = (
                    "‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b>\n\n"
                    "–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å <b>–ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö</b>.\n"
                    "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ <b>–Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ</b> –∏ —É–¥–∞–ª–∏—Ç –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.\n\n"
                    "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
                )
                bot.edit_message_text(
                    warning_text,
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    parse_mode="HTML",
                    reply_markup=build_clear_db_confirmation_markup()
                )
                
            elif action == "db_stats":
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–î
                stats_text = get_db_stats()
                bot.edit_message_text(
                    stats_text,
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    parse_mode="HTML",
                    reply_markup=build_settings_markup()
                )
                
            elif action == "back":
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é
                s = get_settings()
                info = [
                    f"<b>‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã:</b>\n",
                    f"üåê TARGET_URL: {s.target_url}",
                    f"üóÑÔ∏è DB: {s.database_url}",
                    f"üîó PROXY_URL: {os.getenv('PROXY_URL') or s.proxy_url or '-'}",
                ]
                text = "\n".join(info)
                bot.edit_message_text(
                    text,
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    parse_mode="HTML",
                    reply_markup=build_settings_markup()
                )
                
        except Exception as e:
            logger.error(f"Error in settings callback: {e}")
            bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        else:
            bot.answer_callback_query(call.id)

    @bot.callback_query_handler(func=lambda c: c.data and c.data.startswith("confirm:clear_db:"))
    def on_clear_db_confirmation(call: CallbackQuery):
        try:
            action = call.data.split(":")[-1]
            
            if action == "yes":
                # –û—á–∏—â–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                success = clear_database()
                if success:
                    result_text = "‚úÖ <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!</b>\n\n–í—Å–µ –∑–∞–ø–∏—Å–∏ —É–¥–∞–ª–µ–Ω—ã."
                else:
                    result_text = "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                
                bot.edit_message_text(
                    result_text,
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    parse_mode="HTML",
                    reply_markup=build_settings_markup()
                )
                
            elif action == "no":
                # –û—Ç–º–µ–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
                s = get_settings()
                info = [
                    f"<b>‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã:</b>\n",
                    f"üåê TARGET_URL: {s.target_url}",
                    f"üóÑÔ∏è DB: {s.database_url}",
                    f"üîó PROXY_URL: {os.getenv('PROXY_URL') or s.proxy_url or '-'}",
                ]
                text = "\n".join(info)
                bot.edit_message_text(
                    text,
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    parse_mode="HTML",
                    reply_markup=build_settings_markup()
                )
                
        except Exception as e:
            logger.error(f"Error in clear_db confirmation: {e}")
            bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        else:
            bot.answer_callback_query(call.id)

    @bot.message_handler(func=lambda m: m.text == "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    def on_settings(message: Message):
        s = get_settings()
        info = [
            f"<b>‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã:</b>\n",
            f"üåê TARGET_URL: {s.target_url}",
            f"üóÑÔ∏è DB: {s.database_url}",
            f"üîó PROXY_URL: {os.getenv('PROXY_URL') or s.proxy_url or '-'}",
        ]
        text = "\n".join(info)
        bot.send_message(
            message.chat.id, 
            text, 
            parse_mode="HTML",
            reply_markup=build_settings_markup()
        )

    @bot.message_handler(func=lambda m: True)
    def on_fallback(message: Message):
        # Any other message shows the main menu
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=build_main_menu())

    logger.info("Bot started")
    bot.infinity_polling(allowed_updates=["message", "callback_query"]) 


if __name__ == "__main__":
    run_bot()


